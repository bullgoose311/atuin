#include "multiplayer.h"

#include "bit_streams.h"
#include "log.h"

#include <assert.h>
#include <string>

void RPCManager::RegisterUnwrapFunction(rpcId_t rpcId, RPCUnwrapFunc func)
{
	assert(m_rpcUnwrapMap.find(rpcId) == m_rpcUnwrapMap.end());
	m_rpcUnwrapMap[rpcId] = func;
}

void RPCManager::ProcessRPC(InputMemoryBitStream& inputStream)
{
	rpcId_t id;
	inputStream.Read(id);
	m_rpcUnwrapMap[id](inputStream);
}

// TODO: The glue code needed to wrap / unwrap RPCs and keep there parameters in check
// should be autogenerated by a build tool

static void Debug(const std::string& debugMessage)
{
	Log_Info(LOG_LABEL_DEBUG, debugMessage.c_str());
}

static void UnwrapDebug(InputMemoryBitStream& stream)
{
	std::string debugMessage;
	stream.Read(debugMessage);
	Debug(debugMessage);
}

bool Multiplayer_Init()
{
	RPCManager::Get().RegisterUnwrapFunction('DEBG', UnwrapDebug);

	return true;
}